#include "socketstub.h"
#include <string>

SocketStub::SocketStub()
{}
SocketStub::SocketStub( std::string domain, std::string port)
{
    // The MAN page of getaddrinfo() states "All  the other fields in the structure pointed
    // to by hints must contain either 0 or a null pointer, as appropriate." When a struct
    // is created in c++, it will be given a block of memory. This memory is not nessesary
    // empty. Therefor we use the memset function to make sure all fields are NULL.
    memset(&host_info, 0, sizeof host_info);

    //ui->plainTextEdit->insertPlainText(QString("Setting up the structs..."));

    host_info.ai_family = AF_UNSPEC;     // IP version not specified. Can be both.
    host_info.ai_socktype = SOCK_STREAM; // Use SOCK_STREAM for TCP or SOCK_DGRAM for UDP.

    // Now fill up the linked list of host_info structs with google's address information.
    status = getaddrinfo(domain.c_str(), port.c_str(), &host_info, &host_info_list);
    // getaddrinfo returns 0 on succes, or some other value when an error occured.
    // (translated into human readable text by the gai_gai_strerror function).
    //if (status != 0)  ui->plainTextEdit->insertPlainText(QString( "getaddrinfo error") + QString(gai_strerror(status)));

    //ui->plainTextEdit->insertPlainText(QString("Creating a socket..."));
    int socketfd ; // The socket descripter
    socketfd = socket(host_info_list->ai_family, host_info_list->ai_socktype,
                      host_info_list->ai_protocol);
    //if (socketfd == -1)  ui->plainTextEdit->insertPlainText(QString("socket error ")) ;

    //ui->plainTextEdit->insertPlainText(QString("Connect()ing..."));

    status = connect(socketfd, host_info_list->ai_addr, host_info_list->ai_addrlen);
    //if (status == -1)  ui->plainTextEdit->insertPlainText(QString( "connect error" ));

}

//SocketStub::

